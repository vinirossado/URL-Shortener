name: Token Range Service

on:
  push:
    branches: [ "main" ]
    paths:
      - TokenRanges/**
  pull_request:
    branches: [ "main" ]
    paths:
      - TokenRanges/**
  workflow_dispatch: # manual trigger

permissions:
  id-token: write
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x
      - name: Restore dependencies
        run: dotnet restore
      - name: Build
        run: dotnet build --no-restore
      - name: Test
        run: dotnet test --no-build --verbosity normal
      - name: dotnet publish
        run: dotnet publish TokenRanges/src/UrlShortener.TokenRangeService -c Release -o ${{env.DOTNET_ROOT}}/myapp
      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: .net-app
          path: ${{env.DOTNET_ROOT}}/myapp
      - name: Upload Sql artifact for db deployment
        uses: actions/upload-artifact@v4
        with:
          name: pg-script
          path: UrlShortener.TokenRangeService.Tests/Table.sql

  deploy-dev:
    runs-on: ubuntu-latest
    needs: build
    environment: Development

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: .net-app

      - name: Download db artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: pg-script
          
      - name: Install PostgreSQL client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client
      
      # Add Azure login for managing PostgreSQL firewall
      - name: Azure login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}
      
      # Get GitHub Actions runner IP address
      - name: Get GitHub Actions IP
        id: get_ip
        run: |
          GITHUB_IP=$(curl -s https://api.ipify.org)
          echo "Github Actions IP: $GITHUB_IP"
          echo "github_ip=$GITHUB_IP" >> $GITHUB_OUTPUT
      
      # Add temporary firewall rule to allow GitHub Actions IP
      - name: Configure PostgreSQL firewall
        run: |
          # Extract server name from host (remove .postgres.database.azure.com part)
          POSTGRES_SERVER=$(echo "${{ secrets.POSTGRES_HOST }}" | sed 's/\..*//')
          echo "Adding firewall rule for GitHub Actions IP: ${{ steps.get_ip.outputs.github_ip }}"
          
          # Add firewall rule
          az postgres flexible-server firewall-rule create \
            --resource-group ${{ vars.RESOURCE_GROUP_NAME }} \
            --name $POSTGRES_SERVER \
            --rule-name "github-actions-temp" \
            --start-ip-address ${{ steps.get_ip.outputs.github_ip }} \
            --end-ip-address ${{ steps.get_ip.outputs.github_ip }}

      # Deploy database schema
      - name: Deploy Database Schema
        env:
          PGHOST: ${{ secrets.POSTGRES_HOST }}
          PGDATABASE: ranges
          PGUSER: ${{ secrets.POSTGRES_USER }}
          PGPASSWORD: ${{ secrets.PG_SQL_PASSWORD }}
          PGSSLMODE: require
        run: psql -f Table.sql
      
      # Remove temporary firewall rule
      - name: Remove PostgreSQL firewall rule
        if: always() # Run even if previous steps fail
        run: |
          POSTGRES_SERVER=$(echo "${{ secrets.POSTGRES_HOST }}" | sed 's/\..*//')
          
          # Remove firewall rule
          az postgres flexible-server firewall-rule delete \
            --resource-group ${{ vars.RESOURCE_GROUP_NAME }} \
            --name $POSTGRES_SERVER \
            --rule-name "github-actions-temp" \
            --yes

      # Deploy web app
      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ vars.TOKEN_RANGES_RESOURCE_NAME }}
          slot-name: 'Production'
          publish-profile: ${{ secrets.AZURE_TOKENRANGES_PUBLISH_PROFILE }}
          package: .

