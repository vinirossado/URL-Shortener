name: Azure Deploy

on:
  push:
    branches:
      - main
    paths:
      - infrastructure/**
  pull_request:
    branches:
      - main
    paths:
      - infrastructure/**
  workflow_dispatch: # manual trigger

permissions:
  id-token: write
  contents: read

jobs:
  deploy-dev:
    runs-on: ubuntu-latest
    environment: Development
    steps:
      - uses: actions/checkout@v4

      - name: Azure login
        uses: azure/login@v2.1.1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}

      - uses: Azure/CLI@v2
        with:
          inlineScript: |
            #!/bin/bash
            az group create --name ${{ vars.RESOURCE_GROUP_NAME }} --location ${{ vars.RESOURCE_GROUP_LOCATION }}
            echo "Azure resource group created"
        
      - name: Check for and purge soft-deleted KeyVault
        uses: Azure/CLI@v2
        with:
          inlineScript: |
            #!/bin/bash
            uniqueId=$(az group show --name ${{ vars.RESOURCE_GROUP_NAME }} --query id -o tsv | shasum -a 256 | cut -c1-10)
            vaultName="kv-${uniqueId}"
            echo "Checking for soft-deleted KeyVault with name: ${vaultName}"
            
            # Check if the vault exists in a soft-deleted state
            softDeletedVault=$(az keyvault list-deleted --query "[?name=='${vaultName}']" -o tsv)
            
            if [ -n "$softDeletedVault" ]; then
              echo "Found soft-deleted KeyVault. Purging..."
              az keyvault purge --name ${vaultName} --location ${{ vars.RESOURCE_GROUP_LOCATION }}
              # Wait a bit for the purge to complete
              echo "Waiting for purge operation to complete..."
              sleep 60
            else
              echo "No soft-deleted KeyVault found with that name."
            fi

      - name: Deploy
        uses: azure/arm-deploy@v2
        with:
          resourceGroupName: ${{ vars.RESOURCE_GROUP_NAME }}
          template: ./infrastructure/main.bicep
          parameters: pgSqlPassword=${{ secrets.PG_SQL_PASSWORD }}

#  deploy-stg:
#    runs-on: ubuntu-latest
#    needs: deploy-dev
#    environment: Staging
#    steps:
#      - uses: actions/checkout@v4
#
#      - name: Azure login
#        uses: azure/login@v2.1.1
#        with:
#          client-id: ${{ secrets.AZURE_CLIENT_ID }}
#          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
#          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}
#
#      - uses: Azure/CLI@v2
#        with:
#          inlineScript: |
#            #!/bin/bash
#            az group create --name ${{ vars.RESOURCE_GROUP_NAME }} --location ${{ vars.RESOURCE_GROUP_LOCATION }}
#            echo "Azure resource group created"
#
#      - name: Deploy
#        uses: azure/arm-deploy@v2
#        with:
#          resourceGroupName: ${{ vars.RESOURCE_GROUP_NAME }}
#          template: ./infrastructure/main.bicep
#          parameters: pgSqlPassword=${{ secrets.PG_SQL_PASSWORD }}

#
#  deploy-prd:
#    runs-on: ubuntu-latest
#    needs: deploy-stg
#    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
#    environment: Production
#    steps:
#      - uses: actions/checkout@v4
#
#      - name: Azure login
#        uses: azure/login@v2.1.1
#        with:
#          client-id: ${{ secrets.AZURE_CLIENT_ID }}
#          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
#          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}
#
#      - uses: Azure/CLI@v2
#        with:
#          inlineScript: |
#            #!/bin/bash
#            az group create --name ${{ vars.RESOURCE_GROUP_NAME }} --location ${{ vars.RESOURCE_GROUP_LOCATION }}
#            echo "Azure resource group created"
#
#      - name: Deploy
#        uses: azure/arm-deploy@v2
#        with:
#          resourceGroupName: ${{ vars.RESOURCE_GROUP_NAME }}
#          template: ./infrastructure/main.bicep
#          parameters: pgSqlPassword=${{ secrets.PG_SQL_PASSWORD }}
#
